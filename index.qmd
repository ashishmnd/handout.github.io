---
title: "Data Manipulation with the R package dplyr"
subtitle: "Data Analysis for Decision-Making"

author:
  name: "Ashish Mandlik"
  email: "er.ashishmandlik@gmail.com"
date: "2024-12-03"

abstract: "This presentation explores the use of the dplyr package in R for efficient data manipulation and analysis. Focused on a practical scenario, we will demonstrate how to identify the best employees for a new project by leveraging dplyr's powerful functions. Participants will learn to filter data based on specific criteria, arrange it for ranking, and select key information to support decision-making."

bibliography: "literature.bib"

format:
  html:
    embed-resources: true
    code-copy: true
    
    pdf: 
    pdf-engine: pdflatex
    documentclass: article
    classoption: [a4paper]
    fontsize: 11pt
    geometry:
      - top=30mm
      - left=20mm
      - right=20mm
      - bottom=30mm
    colorlinks: true
    link-citations: true
---

# Introduction

R, one of the most popular programming languages for statistical analysis and data science, offers powerful tools for handling data—among them, the dplyr package stands out for its simplicity and versatility.

Data Manipulation with dplyr in R involves transforming and analyzing data efficiently using a set of functions designed for data wrangling. dplyr is part of the tidyverse package and provides a coherent grammar for data manipulation, which helps streamline common data operations.

# Types of Verbs

**Rows**

The most important verbs that operate on rows of a dataset are **filter()**, which changes which rows are present without changing their order, and **arrange()**, which changes the order of the rows without changing which are present. Both functions only affect the rows, and the columns are left unchanged. We’ll also discuss **distinct()** which finds rows with unique values. Unlike arrange() and filter() it can also optionally modify the columns.

**Columns**

There are four important verbs that affect the columns without changing the rows:**mutate()** creates new columns that are derived from the existing columns,**select()** changes which columns are present,**rename()** changes the names of the columns, and **relocate()** changes the positions of the columns.

::: {#tbl-tpc}
| Sr.no | Verbs | Function |
|------------------------|------------------------|------------------------|
| 1 | filter() | picks cases based on their values. |
| 2 | arrange() | changes the ordering of the rows. |
| 3 | distance() | This function calculates a variety of dissimilarity or distance metrics. |
| 4 | mutate() | adds new variables that are functions of existing variables |
| 5 | select() | picks variables based on their names. |
| 6 | rename() | changes the names of individual variables |
| 7 | relocate() | sed to rearrange the order of columns within a data frame. |
| 8 | summarise() | reduces multiple values down to a single summary. |
|  |  |  |
:::

**Pipe(** **%\>%)**

Pipe in R is an operator that takes the output of one function and passes it into another function as an argument. It links together all the steps in data analysis making the code more efficient and readable.

Data analysis often involves many steps. A typical journey from raw data to results might involve filtering cases, transforming values, summarizing data and then running a statistical test. Pipe in R links all these steps together, while keeping our code efficient and readable.

Syntex :

mtcars **%\>%** group_by(cyl) %\>% summarise(mean_mpg = mean(mpg))

# Exercise

## **Installation of dplyr package**

Open your R studio and in the Console just write this code. R will automatically install the package.

```         
install.packages("dplyr")
```

**Scenario**

The company needs to select the best employees for a new tech project. The project requires:

1.  **Relevant roles**: Software Engineers, Data Scientists, DevOps Engineers, or Front-End Developers.

2.  **Years of experience**: At least 5 years.

3.  **Key skills**: Python, AWS, or JavaScript.

The goal is to use the dplyr package to filter and rank employees based on the given criteria.

## Steps for the Exercise

Step1: Load and Inspect the Dataset

Start by loading the dataset into R

``` r
# Create the dataset
employee_data <- data.frame(
  Name = c("Alice Johnson", "Bob Smith", "Charlie Brown", "Dana White", "Eve Jackson",
           "Frank Green", "Grace Lee", "Henry Wilson", "Ian Black", "Jane Doe"),
  Role = c("Software Engineer", "Data Scientist", "Project Manager", "UX Designer",
           "DevOps Engineer", "Business Analyst", "Front-End Developer", 
           "Cybersecurity Analyst", "Product Manager", "Marketing Specialist"),
  Years_of_Experience = c(5, 7, 10, 4, 6, 8, 3, 9, 12, 5),
  Skill_Sets = c("Python, Java, SQL", "R, Python, Machine Learning", "Agile, Scrum, Leadership", 
                 "Figma, Sketch, User Research", "AWS, Docker, Kubernetes", "Excel, SQL, Power BI", 
                 "HTML, CSS, JavaScript, React", "Network Security, Ethical Hacking", 
                 "Product Strategy, Market Analysis", "SEO, Content Marketing, Analytics"),
  Age = c(28, 32, 40, 27, 30, 35, 25, 36, 38, 29)
)

# View the data
head(employee_data)
```

Step 2: Filter Employees Based on Role and Experience

Use filter() to select employees with the relevant roles and at least 5 years of experience.

``` r
# Filter relevant roles and experience
filtered_employees <- employee_data %>%
  filter(Role %in% c("Software Engineer", "Data Scientist", "DevOps Engineer", "Front-End Developer") &
         Years_of_Experience >= 5)

filtered_employees
```

Step 3: Check for Key Skills

Next,filter employees who have the required skills: Python, AWS, or JavaScript.

``` r
# Filter employees with key skills
best_candidates <- filtered_employees %>%
  filter(grepl("Python|AWS|JavaScript", Skill_Sets))

best_candidates
```

Step 4: Rank Candidates by Experience

Use arrange() to rank the candidates by their years of experience in descending order.

``` r
# Rank candidates by experience
ranked_candidates <- best_candidates %>%
  arrange(desc(Years_of_Experience))

ranked_candidates
```

Step 5: Select Key Information

Use select() to display only the most relevant columns for decision-making.

``` r
Copy code
# Select relevant columns
final_selection <- ranked_candidates %>%
  select(Name, Role, Years_of_Experience, Skill_Sets)

final_selection
```

# Conclusion

In this session, we’ve seen how the `dplyr` package in R simplifies data manipulation through its intuitive and powerful functions. From filtering and arranging data to summarizing key insights, `dplyr` provides a streamlined workflow that enhances both efficiency and readability.

Using a practical example, we demonstrated how to identify the best employees for a project, showcasing the value of tools like `filter()`, `arrange()`, and `mutate()` in real-world scenarios. These skills are essential for anyone working with data, enabling faster decision-making and more insightful analysis.

As you continue to explore `dplyr`, you’ll discover even more ways to handle complex data tasks with ease.

# References

-   Wickham, H., François, R., Henry, L., & Müller, K. (2023). *dplyr: A Grammar of Data Manipulation*. Retrieved from [https://dplyr.tidyverse.org](https://dplyr.tidyverse.org/)

-   Tan, P.-N., Steinbach, M., & Kumar, V. (2018). *Introduction to data mining* (2nd ed.). Pearson. Wickham, H., & Grolemund, G. (2023). *R for data science (2e)*. <https://r4ds.hadley.nz/>